import java.awt.Desktop

def androidExclusion = [
        '**/R.class',
        '**/BR.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        'android/**',
        '**/Manifest*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/io/realm/*.class',
        '**/com/bumptech/glide/*.class',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        '**/*$*', // Anonymous classes generated by kotlin
        // custom
        '**/com/fleming/githubuserfinder/custom/**/*.class',
        '**/com/fleming/githubuserfinder/base/*.class',
        '**/com/fleming/githubuserfinder/base/scheduler/*.class',
        // di
        '**/com/fleming/githubuserfinder/di/*.class',
        '**/com/fleming/githubuserfinder/di/**/*.class',
        // global
        '**/com/fleming/githubuserfinder/*.class',
        '**/*Activity.class',
        '**/*Adapter.class',
        '**/*ViewHolder.class',
        '**/*Decoration.class'
]

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            def sourceName
            if (!productFlavorName) {
                sourceName = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                def javaPath = "${project.buildDir}/intermediates/javac/${sourceName}/compile${sourceName.capitalize()}JavaWithJavac/classes"
                def kotlinPath = "${project.buildDir}/tmp/kotlin-classes/${sourceName}"

                def debugTree = fileTree(dir: javaPath, excludes: androidExclusion)
                def kotlinDebugTree = fileTree(dir: kotlinPath, excludes: androidExclusion)
                classDirectories.from = files([debugTree], [kotlinDebugTree])

                sourceDirectories.from = files(["src/main/java",
                                           "src/$productFlavorName/java",
                                           "src/$buildTypeName/java",
                                           "src/main/kotlin",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/kotlin"])

                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}

def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}

task openUnitTestReport(dependsOn: 'createDebugUnitTestCoverageReport') {
    group = "Reporting"
    doLast {
        def file = project.file("$project.buildDir/reports/tests/testDebugUnitTest/index.html")
        browse file
    }
}

task openJacocoReport(dependsOn: 'createDebugUnitTestCoverageReport') {
    group = "Reporting"
    doLast {
        def file = project.file("$project.buildDir/jacoco/createDebugUnitTestCoverageReport/html/index.html")
        browse file
    }
}